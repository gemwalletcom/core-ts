/*
 Generated by typeshare 1.13.3
*/

import { SwapProvider } from "../SwapProvider";

export interface ApprovalData {
	token: string;
	spender: string;
	value: string;
}

export interface QuoteAsset {
	id: string;
	symbol: string;
	decimals: number;
}

export interface SwapProviderData {
	provider: SwapProvider;
	name: string;
	protocolName: string;
}

export interface SwapQuote {
	fromAddress: string;
	fromValue: string;
	toAddress: string;
	toValue: string;
	providerData: SwapProviderData;
	slippageBps: number;
	etaInSeconds?: number;
	useMaxAmount?: boolean;
}

export enum SwapQuoteDataType {
	Contract = "contract",
	Transfer = "transfer",
}

export interface SwapQuoteData {
	to: string;
	dataType: SwapQuoteDataType;
	value: string;
	data: string;
	memo?: string;
	approval?: ApprovalData;
	gasLimit?: string;
}

export interface SwapData {
	quote: SwapQuote;
	data: SwapQuoteData;
}

export enum SwapStatus {
	Pending = "pending",
	Completed = "completed",
	Failed = "failed",
	Refunded = "refunded",
}

