/*
 Generated by typeshare 1.13.2
*/

export enum Chain {
	Bitcoin = "bitcoin",
	BitcoinCash = "bitcoincash",
	Litecoin = "litecoin",
	Ethereum = "ethereum",
	SmartChain = "smartchain",
	Solana = "solana",
	Polygon = "polygon",
	Thorchain = "thorchain",
	Cosmos = "cosmos",
	Osmosis = "osmosis",
	Arbitrum = "arbitrum",
	Ton = "ton",
	Tron = "tron",
	Doge = "doge",
	Optimism = "optimism",
	Aptos = "aptos",
	Base = "base",
	AvalancheC = "avalanchec",
	Sui = "sui",
	Xrp = "xrp",
	OpBNB = "opbnb",
	Fantom = "fantom",
	Gnosis = "gnosis",
	Celestia = "celestia",
	Injective = "injective",
	Sei = "sei",
	Manta = "manta",
	Blast = "blast",
	Noble = "noble",
	ZkSync = "zksync",
	Linea = "linea",
	Mantle = "mantle",
	Celo = "celo",
	Near = "near",
	World = "world",
	Stellar = "stellar",
	Sonic = "sonic",
	Algorand = "algorand",
	Polkadot = "polkadot",
	Cardano = "cardano",
	Abstract = "abstract",
	Berachain = "berachain",
	Ink = "ink",
	Unichain = "unichain",
	Hyperliquid = "hyperliquid",
	HyperCore = "hypercore",
	Monad = "monad",
}

export interface Account {
	chain: Chain;
	address: string;
	derivationPath: string;
	extendedPublicKey?: string;
}

export interface AddressName {
	chain: Chain;
	address: string;
	name: string;
}

export interface ApprovalData {
	token: string;
	spender: string;
	value: string;
}

export enum AssetType {
	NATIVE = "NATIVE",
	ERC20 = "ERC20",
	BEP20 = "BEP20",
	SPL = "SPL",
	TRC20 = "TRC20",
	TOKEN = "TOKEN",
	IBC = "IBC",
	JETTON = "JETTON",
	SYNTH = "SYNTH",
	ASA = "ASA",
	PERPETUAL = "PERPETUAL",
}

export interface Asset {
	id: string;
	name: string;
	symbol: string;
	decimals: number;
	type: AssetType;
}

export interface AssetProperties {
	isEnabled: boolean;
	isBuyable: boolean;
	isSellable: boolean;
	isSwapable: boolean;
	isStakeable: boolean;
	stakingApr?: number;
}

export interface AssetScore {
	rank: number;
}

export interface AssetBasic {
	asset: Asset;
	properties: AssetProperties;
	score: AssetScore;
}

export interface AssetLink {
	name: string;
	url: string;
}

export interface AssetFull {
	asset: Asset;
	properties: AssetProperties;
	score: AssetScore;
	tags: string[];
	links: AssetLink[];
}

export interface AssetMarket {
	marketCap?: number;
	marketCapFdv?: number;
	marketCapRank?: number;
	totalVolume?: number;
	circulatingSupply?: number;
	totalSupply?: number;
	maxSupply?: number;
}

export interface Price {
	price: number;
	priceChangePercentage24h: number;
	updatedAt: Date;
}

export interface AssetMarketPrice {
	price?: Price;
	market?: AssetMarket;
}

export interface AssetMetaData {
	isEnabled: boolean;
	isBuyEnabled: boolean;
	isSellEnabled: boolean;
	isSwapEnabled: boolean;
	isStakeEnabled: boolean;
	isPinned: boolean;
	isActive: boolean;
	stakingApr?: number;
	rankScore: number;
}

export interface AssetPrice {
	assetId: string;
	price: number;
	priceChangePercentage24h: number;
	updatedAt: Date;
}

export interface AssetPriceInfo {
	assetId: string;
	price: Price;
	market: AssetMarket;
}

export interface AssetPrices {
	currency: string;
	prices: AssetPrice[];
}

export interface AssetPricesRequest {
	currency?: string;
	assetIds: string[];
}

export enum WalletType {
	multicoin = "multicoin",
	single = "single",
	private_key = "privateKey",
	view = "view",
}

export interface Wallet {
	id: string;
	name: string;
	index: number;
	type: WalletType;
	accounts: Account[];
	order: number;
	isPinned: boolean;
	imageUrl?: string;
}

export enum BannerEvent {
	Stake = "stake",
	AccountActivation = "accountActivation",
	EnableNotifications = "enableNotifications",
	AccountBlockedMultiSignature = "accountBlockedMultiSignature",
	ActivateAsset = "activateAsset",
}

export enum BannerState {
	Active = "active",
	Cancelled = "cancelled",
	AlwaysActive = "alwaysActive",
}

export interface Banner {
	wallet?: Wallet;
	asset?: Asset;
	chain?: Chain;
	event: BannerEvent;
	state: BannerState;
}

export interface BlockExplorerLink {
	name: string;
	link: string;
}

export enum NodeState {
	Active = "active",
	Inactive = "inactive",
}

export interface Node {
	url: string;
	status: NodeState;
	priority: number;
}

export interface ChainNode {
	chain: string;
	node: Node;
}

export interface ChainNodes {
	chain: string;
	nodes: Node[];
}

export interface ChartCandleStick {
	date: Date;
	open: number;
	high: number;
	low: number;
	close: number;
	volume: number;
}

export interface ChartDateValue {
	date: Date;
	value: number;
}

export interface ChartValue {
	timestamp: number;
	value: number;
}

export interface Charts {
	price?: Price;
	market?: AssetMarket;
	prices: ChartValue[];
	marketCaps: ChartValue[];
	totalVolumes: ChartValue[];
}

export enum PlatformStore {
	AppStore = "appStore",
	GooglePlay = "googlePlay",
	Fdroid = "fdroid",
	Huawei = "huawei",
	SolanaStore = "solanaStore",
	SamsungStore = "samsungStore",
	ApkUniversal = "apkUniversal",
	Local = "local",
}

export interface Release {
	version: string;
	store: PlatformStore;
	upgradeRequired: boolean;
}

export interface ConfigVersions {
	fiatOnRampAssets: number;
	fiatOffRampAssets: number;
	swapAssets: number;
}

export enum SwapProvider {
	UniswapV3 = "uniswap_v3",
	UniswapV4 = "uniswap_v4",
	PancakeswapV3 = "pancakeswap_v3",
	Aerodrome = "aerodrome",
	PancakeswapAptosV2 = "pancakeswap_aptos_v2",
	Thorchain = "thorchain",
	Orca = "orca",
	Jupiter = "jupiter",
	Across = "across",
	Oku = "oku",
	Wagmi = "wagmi",
	Cetus = "cetus",
	StonfiV2 = "stonfi_v2",
	Mayan = "mayan",
	Reservoir = "reservoir",
	Symbiosis = "symbiosis",
	Chainflip = "chainflip",
	CetusAggregator = "cetus_aggregator",
	Relay = "relay",
	NearIntent = "near_intent",
}

export interface SwapConfig {
	enabledProviders: SwapProvider[];
}

export interface ConfigResponse {
	releases: Release[];
	versions: ConfigVersions;
	swap: SwapConfig;
}

export enum DelegationState {
	Active = "active",
	Pending = "pending",
	Undelegating = "undelegating",
	Inactive = "inactive",
	Activating = "activating",
	Deactivating = "deactivating",
	AwaitingWithdrawal = "awaitingwithdrawal",
}

export interface DelegationBase {
	assetId: string;
	state: DelegationState;
	balance: string;
	shares: string;
	rewards: string;
	completionDate?: Date;
	delegationId: string;
	validatorId: string;
}

export interface DelegationValidator {
	chain: Chain;
	id: string;
	name: string;
	isActive: boolean;
	commision: number;
	apr: number;
}

export interface Delegation {
	base: DelegationBase;
	validator: DelegationValidator;
	price?: Price;
}

export enum Platform {
	IOS = "ios",
	Android = "android",
}

export interface Device {
	id: string;
	platform: Platform;
	platformStore?: PlatformStore;
	token: string;
	locale: string;
	version: string;
	currency: string;
	isPushEnabled: boolean;
	isPriceAlertsEnabled?: boolean;
	subscriptionsVersion: number;
}

export interface FiatAssets {
	version: number;
	assetIds: string[];
}

export interface FiatProvider {
	id: string;
	name: string;
	imageUrl: string;
}

export enum FiatQuoteType {
	Buy = "buy",
	Sell = "sell",
}

export interface FiatQuote {
	provider: FiatProvider;
	type: FiatQuoteType;
	fiatAmount: number;
	fiatCurrency: string;
	cryptoAmount: number;
	cryptoValue: string;
	redirectUrl: string;
}

export interface FiatQuoteError {
	provider: string;
	error: string;
}

export interface FiatQuoteRequest {
	assetId: string;
	type: FiatQuoteType;
	fiatCurrency: string;
	fiatAmount?: number;
	cryptoValue?: string;
	walletAddress: string;
}

export interface FiatQuotes {
	quotes: FiatQuote[];
}

export interface FiatRate {
	symbol: string;
	rate: number;
}

export interface GraphqlError {
	message: string;
}

export interface GraphqlData<T> {
	data?: T;
	errors?: GraphqlError[];
}

export interface GraphqlRequest {
	operationName: string;
	variables: Record<string, string>;
	query: string;
}

export interface MarketDominance {
	assetId: string;
	dominance: number;
}

export interface MarketsAssets {
	trending: string[];
	gainers: string[];
	losers: string[];
}

export interface Markets {
	marketCap: number;
	marketCapChangePercentage24h: number;
	assets: MarketsAssets;
	dominance: MarketDominance[];
	totalVolume24h: number;
}

export enum NFTType {
	ERC721 = "erc721",
	ERC1155 = "erc1155",
	SPL = "spl",
	JETTON = "jetton",
}

export interface NFTResource {
	url: string;
	mimeType: string;
}

export interface NFTImages {
	preview: NFTResource;
}

export interface NFTAttribute {
	name: string;
	value: string;
	percentage?: number;
}

export interface NFTAsset {
	id: string;
	collectionId: string;
	contractAddress?: string;
	tokenId: string;
	tokenType: NFTType;
	name: string;
	description?: string;
	chain: Chain;
	resource: NFTResource;
	images: NFTImages;
	attributes: NFTAttribute[];
}

export interface NFTCollection {
	id: string;
	name: string;
	description?: string;
	chain: Chain;
	contractAddress: string;
	images: NFTImages;
	isVerified: boolean;
	links: AssetLink[];
}

export interface NFTAssetData {
	collection: NFTCollection;
	asset: NFTAsset;
}

export interface NFTAssetId {
	chain: Chain;
	contractAddress: string;
	tokenId: string;
}

export interface NFTData {
	collection: NFTCollection;
	assets: NFTAsset[];
}

export interface NameRecord {
	name: string;
	chain: Chain;
	address: string;
	provider: string;
}

export interface NodesResponse {
	version: number;
	nodes: ChainNodes[];
}

export enum PerpetualProvider {
	Hypercore = "hypercore",
}

export interface Perpetual {
	id: string;
	name: string;
	provider: PerpetualProvider;
	assetId: string;
	identifier: string;
	price: number;
	pricePercentChange24h: number;
	openInterest: number;
	volume24h: number;
	funding: number;
	leverage: number[];
}

export interface PerpetualBalance {
	available: number;
	reserved: number;
}

export interface PerpetualData {
	perpetual: Perpetual;
	asset: Asset;
}

export enum PerpetualMarginType {
	Cross = "cross",
	Isolated = "isolated",
}

export enum PerpetualDirection {
	Short = "short",
	Long = "long",
}

export interface PriceTarget {
	price?: number;
	percentage?: number;
}

export interface PerpetualPosition {
	id: string;
	perpetualId: string;
	assetId: string;
	size: number;
	sizeValue: number;
	leverage: number;
	entryPrice?: number;
	liquidationPrice?: number;
	marginType: PerpetualMarginType;
	direction: PerpetualDirection;
	marginAmount: number;
	takeProfit?: PriceTarget;
	stopLoss?: PriceTarget;
	pnl: number;
	funding?: number;
}

export interface PerpetualPositionData {
	perpetual: Perpetual;
	asset: Asset;
	position: PerpetualPosition;
}

export interface PerpetualPositionsSummary {
	positions: PerpetualPosition[];
	balance: PerpetualBalance;
}

export enum PriceAlertDirection {
	Up = "up",
	Down = "down",
}

export interface PriceAlert {
	assetId: string;
	currency: string;
	price?: number;
	pricePercentChange?: number;
	priceDirection?: PriceAlertDirection;
	lastNotifiedAt?: Date;
}

export interface PriceAlertData {
	asset: Asset;
	price?: Price;
	priceAlert: PriceAlert;
}

export interface PriceData {
	asset: Asset;
	price?: Price;
	priceAlerts: PriceAlert[];
	market?: AssetMarket;
	links: AssetLink[];
}

export interface QuoteAsset {
	id: string;
	symbol: string;
	decimals: number;
}

export interface ProxyQuoteRequest {
	from_address: string;
	to_address: string;
	from_asset: QuoteAsset;
	to_asset: QuoteAsset;
	from_value: string;
	referral_bps: number;
	slippage_bps: number;
}

export interface ProxyQuote {
	quote: ProxyQuoteRequest;
	output_value: string;
	output_min_value: string;
	route_data: object;
	eta_in_seconds: number;
}

export interface PushNotificationAsset {
	assetId: string;
}

export enum PushNotificationTypes {
	Test = "test",
	Transaction = "transaction",
	Asset = "asset",
	PriceAlert = "priceAlert",
	BuyAsset = "buyAsset",
	SwapAsset = "swapAsset",
}

export interface PushNotificationPayloadType {
	type: PushNotificationTypes;
}

export interface PushNotificationSwapAsset {
	fromAssetId: string;
	toAssetId: string;
}

export interface PushNotificationTransaction {
	walletIndex: number;
	assetId: string;
	transactionId: string;
}

export interface ResponseError {
	error: string;
}

export interface ResponseResult<T> {
	data: T;
	error?: ResponseError;
}

export enum AddressType {
	Address = "address",
	Contract = "contract",
	Validator = "validator",
}

export interface ScanAddress {
	chain: Chain;
	address: string;
	name?: string;
	type?: AddressType;
	isMalicious?: boolean;
	isMemoRequired?: boolean;
	isVerified?: boolean;
}

export interface ScanAddressTarget {
	chain: Chain;
	address: string;
}

export interface ScanTransaction {
	isMalicious: boolean;
	isMemoRequired: boolean;
}

export enum TransactionType {
	Transfer = "transfer",
	TransferNFT = "transferNFT",
	Swap = "swap",
	TokenApproval = "tokenApproval",
	StakeDelegate = "stakeDelegate",
	StakeUndelegate = "stakeUndelegate",
	StakeRewards = "stakeRewards",
	StakeRedelegate = "stakeRedelegate",
	StakeWithdraw = "stakeWithdraw",
	AssetActivation = "assetActivation",
	SmartContractCall = "smartContractCall",
	PerpetualOpenPosition = "perpetualOpenPosition",
	PerpetualClosePosition = "perpetualClosePosition",
}

export interface ScanTransactionPayload {
	deviceId: string;
	walletIndex: number;
	origin: ScanAddressTarget;
	target: ScanAddressTarget;
	website?: string;
	type: TransactionType;
}

export interface StakeValidator {
	id: string;
	name: string;
}

export interface Subscription {
	wallet_index: number;
	chain: Chain;
	address: string;
}

export interface SwapProviderData {
	provider: SwapProvider;
	name: string;
	protocolName: string;
}

export interface SwapQuote {
	fromValue: string;
	toValue: string;
	providerData: SwapProviderData;
	walletAddress: string;
	slippageBps: number;
	etaInSeconds?: number;
}

export interface SwapQuoteData {
	to: string;
	value: string;
	data: string;
	approval?: ApprovalData;
	gasLimit?: string;
}

export interface SwapData {
	quote: SwapQuote;
	data: SwapQuoteData;
}

export enum TransactionState {
	Pending = "pending",
	Confirmed = "confirmed",
	Failed = "failed",
	Reverted = "reverted",
}

export enum TransactionDirection {
	SelfTransfer = "self",
	Outgoing = "outgoing",
	Incoming = "incoming",
}

export interface TransactionInput {
	address: string;
	value: string;
}

export interface Transaction {
	id: string;
	hash: string;
	assetId: string;
	from: string;
	to: string;
	contract?: string;
	type: TransactionType;
	state: TransactionState;
	blockNumber: string;
	sequence: string;
	fee: string;
	feeAssetId: string;
	value: string;
	memo?: string;
	direction: TransactionDirection;
	utxoInputs: TransactionInput[];
	utxoOutputs: TransactionInput[];
	metadata?: object;
	createdAt: Date;
}

export interface TransactionExtended {
	transaction: Transaction;
	asset: Asset;
	feeAsset: Asset;
	price?: Price;
	feePrice?: Price;
	assets: Asset[];
	prices: AssetPrice[];
	fromAddress?: AddressName;
	toAddress?: AddressName;
}

export interface TransactionNFTTransferMetadata {
	assetId: string;
	name?: string;
}

export interface TransactionSwapMetadata {
	fromAsset: string;
	fromValue: string;
	toAsset: string;
	toValue: string;
	provider?: string;
}

export interface TransactionWallet {
	transaction: Transaction;
	wallet: Wallet;
}

export interface TransactionsFetchOption {
	wallet_index: number;
	asset_id?: string;
	from_timestamp?: number;
}

export interface TransactionsResponse {
	transactions: Transaction[];
	addressNames: AddressName[];
}

export interface UTXO {
	transaction_id: string;
	vout: number;
	value: string;
	address: string;
}

export interface WCEthereumTransaction {
	chainId?: string;
	from: string;
	to: string;
	value?: string;
	gas?: string;
	gasLimit?: string;
	gasPrice?: string;
	maxFeePerGas?: string;
	maxPriorityFeePerGas?: string;
	nonce?: string;
	data?: string;
}

export interface WCSolanaSignMessage {
	message: string;
	pubkey: string;
}

export interface WCSolanaSignMessageResult {
	signature: string;
}

export interface WCSolanaTransaction {
	transaction: string;
}

export enum WalletConnectionState {
	Started = "started",
	Active = "active",
	Expired = "expired",
}

export interface WalletConnectionSessionAppMetadata {
	name: string;
	description: string;
	url: string;
	icon: string;
	redirectNative?: string;
	redirectUniversal?: string;
}

export interface WalletConnectionSession {
	id: string;
	sessionId: string;
	state: WalletConnectionState;
	chains: Chain[];
	createdAt: Date;
	expireAt: Date;
	metadata: WalletConnectionSessionAppMetadata;
}

export interface WalletConnection {
	session: WalletConnectionSession;
	wallet: Wallet;
}

export interface WalletConnectionSessionProposal {
	defaultWallet: Wallet;
	wallets: Wallet[];
	metadata: WalletConnectionSessionAppMetadata;
}

export interface WalletId {
	id: string;
}

export enum WebSocketPriceActionType {
	Subscribe = "subscribe",
	Add = "add",
}

export interface WebSocketPriceAction {
	action: WebSocketPriceActionType;
	assets?: string[];
}

export interface WebSocketPricePayload {
	prices: AssetPrice[];
	rates: FiatRate[];
}

export enum AssetOrder {
	PriceChange24hAsc = "priceChange24hAsc",
	PriceChange24hDesc = "priceChange24hDesc",
}

export enum AssetRank {
	High = "high",
	Medium = "medium",
	Low = "low",
	Trivial = "trivial",
	Inactive = "inactive",
	Abandoned = "abandoned",
	Suspended = "suspended",
	Migrated = "migrated",
	Deprecated = "deprecated",
	Spam = "spam",
	Fraudulent = "fraudulent",
	Unknown = "unknown",
}

export enum AssetScoreType {
	Verified = "verified",
	Unverified = "unverified",
	Suspicious = "suspicious",
}

export enum AssetSubtype {
	NATIVE = "NATIVE",
	TOKEN = "TOKEN",
}

export enum AssetTag {
	Trending = "trending",
	TrendingFiatPurchase = "trending_fiat_purchase",
	Gainers = "gainers",
	Losers = "losers",
	New = "new",
	Stablecoins = "stablecoins",
}

export enum BalanceType {
	available = "available",
	locked = "locked",
	frozen = "frozen",
	staked = "staked",
	pending = "pending",
	rewards = "rewards",
	reserved = "reserved",
}

export enum BitcoinChain {
	Bitcoin = "bitcoin",
	BitcoinCash = "bitcoincash",
	Litecoin = "litecoin",
	Doge = "doge",
}

export enum ChainType {
	Ethereum = "ethereum",
	Bitcoin = "bitcoin",
	Solana = "solana",
	Cosmos = "cosmos",
	Ton = "ton",
	Tron = "tron",
	Aptos = "aptos",
	Sui = "sui",
	Xrp = "xrp",
	Near = "near",
	Stellar = "stellar",
	Algorand = "algorand",
	Polkadot = "polkadot",
	Cardano = "cardano",
	HyperCore = "hypercore",
}

export enum ChartPeriod {
	Hour = "hour",
	Day = "day",
	Week = "week",
	Month = "month",
	Year = "year",
	All = "all",
}

export enum CosmosChain {
	Cosmos = "cosmos",
	Osmosis = "osmosis",
	Celestia = "celestia",
	Thorchain = "thorchain",
	Injective = "injective",
	Sei = "sei",
	Noble = "noble",
}

export enum CosmosDenom {
	Rune = "rune",
	Uatom = "uatom",
	Uosmo = "uosmo",
	Utia = "utia",
	Inj = "inj",
	Usei = "usei",
	Uusdc = "uusdc",
}

export enum Currency {
	MXN = "MXN",
	CHF = "CHF",
	CNY = "CNY",
	THB = "THB",
	HUF = "HUF",
	AUD = "AUD",
	IDR = "IDR",
	RUB = "RUB",
	ZAR = "ZAR",
	EUR = "EUR",
	NZD = "NZD",
	SAR = "SAR",
	SGD = "SGD",
	BMD = "BMD",
	KWD = "KWD",
	HKD = "HKD",
	JPY = "JPY",
	GBP = "GBP",
	DKK = "DKK",
	KRW = "KRW",
	PHP = "PHP",
	CLP = "CLP",
	TWD = "TWD",
	PKR = "PKR",
	BRL = "BRL",
	CAD = "CAD",
	BHD = "BHD",
	MMK = "MMK",
	VEF = "VEF",
	VND = "VND",
	CZK = "CZK",
	TRY = "TRY",
	INR = "INR",
	ARS = "ARS",
	BDT = "BDT",
	NOK = "NOK",
	USD = "USD",
	LKR = "LKR",
	ILS = "ILS",
	PLN = "PLN",
	NGN = "NGN",
	UAH = "UAH",
	XDR = "XDR",
	MYR = "MYR",
	AED = "AED",
	SEK = "SEK",
}

export enum EVMChain {
	Ethereum = "ethereum",
	SmartChain = "smartchain",
	Polygon = "polygon",
	Arbitrum = "arbitrum",
	Optimism = "optimism",
	Base = "base",
	AvalancheC = "avalanchec",
	OpBNB = "opbnb",
	Fantom = "fantom",
	Gnosis = "gnosis",
	Manta = "manta",
	Blast = "blast",
	ZkSync = "zksync",
	Linea = "linea",
	Mantle = "mantle",
	Celo = "celo",
	World = "world",
	Sonic = "sonic",
	Abstract = "abstract",
	Berachain = "berachain",
	Ink = "ink",
	Unichain = "unichain",
	Hyperliquid = "hyperliquid",
	Monad = "monad",
}

export enum EncodingType {
	Hex = "Hex",
	Base58 = "Base58",
	Base32 = "Base32",
}

export enum FeePriority {
	Slow = "slow",
	Normal = "normal",
	Fast = "fast",
}

export enum FeeUnitType {
	SatVb = "satVb",
	Gwei = "gwei",
	Native = "native",
}

export enum LinkType {
	X = "x",
	Discord = "discord",
	Reddit = "reddit",
	Telegram = "telegram",
	GitHub = "github",
	YouTube = "youtube",
	Facebook = "facebook",
	Website = "website",
	Coingecko = "coingecko",
	OpenSea = "opensea",
	Instagram = "instagram",
	MagicEden = "magiceden",
	CoinMarketCap = "coinmarketcap",
	TikTok = "tiktok",
}

export enum NameProvider {
	Ud = "ud",
	Ens = "ens",
	Sns = "sns",
	Ton = "ton",
	Tree = "tree",
	Spaceid = "spaceid",
	Eths = "eths",
	Did = "did",
	Suins = "suins",
	Aptos = "aptos",
	Injective = "injective",
	Icns = "icns",
	Lens = "lens",
	Basenames = "basenames",
	Hyperliquid = "hyperliquid",
}

export enum PriceAlertNotificationType {
	Auto = "Auto",
	Price = "Price",
	PricePercentChange = "PricePercentChange",
}

export enum SolanaTokenProgramId {
	Token = "token",
	Token2022 = "token2022",
}

export enum StakeChain {
	Cosmos = "cosmos",
	Osmosis = "osmosis",
	Injective = "injective",
	Sei = "sei",
	Celestia = "celestia",
	Solana = "solana",
	Sui = "sui",
	SmartChain = "smartchain",
	Tron = "tron",
}

export enum SwapMode {
	ExactIn = "ExactIn",
	ExactOut = "ExactOut",
}

export type SwapProviderMode = 
	| { type: "OnChain", content?: undefined }
	| { type: "CrossChain", content?: undefined }
	| { type: "Bridge", content?: undefined }
	| { type: "OmniChain", content: Chain[] };

export enum WalletConnectCAIP2 {
	Eip155 = "eip155",
	Solana = "solana",
	Cosmos = "cosmos",
	Algorand = "algorand",
}

export enum WalletConnectEthereumMethods {
	chain_id = "chainId",
	sign = "sign",
	personal_sign = "personalSign",
	sign_typed_data = "signTypedData",
	sign_typed_data_v4 = "signTypedDataV4",
	sign_transaction = "signTransaction",
	send_transaction = "sendTransaction",
	send_raw_transaction = "sendRawTransaction",
	switch_chain = "switchChain",
	add_chain = "addChain",
}

export enum WalletConnectSolanaMethods {
	sign_message = "signMessage",
	sign_transaction = "signTransaction",
	sign_and_send_transaction = "signAndSendTransaction",
	sign_all_transactions = "signAllTransactions",
}

export enum WalletConnectionEvents {
	connect = "connect",
	disconnect = "disconnect",
	accounts_changed = "accountsChanged",
	chain_changed = "chainChanged",
}

export enum WalletConnectionMethods {
	eth_chain_id = "eth_chainId",
	eth_sign = "eth_sign",
	personal_sign = "personal_sign",
	eth_sign_typed_data = "eth_signTypedData",
	eth_sign_typed_data_v4 = "eth_signTypedData_v4",
	eth_sign_transaction = "eth_signTransaction",
	eth_send_transaction = "eth_sendTransaction",
	eth_send_raw_transaction = "eth_sendRawTransaction",
	wallet_switch_ethereum_chain = "wallet_switchEthereumChain",
	wallet_add_ethereum_chain = "wallet_addEthereumChain",
	solana_sign_message = "solana_signMessage",
	solana_sign_transaction = "solana_signTransaction",
	solana_sign_and_send_transaction = "solana_signAndSendTransaction",
	solana_sign_all_transactions = "solana_signAllTransactions",
}

